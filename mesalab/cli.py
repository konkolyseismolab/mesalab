# cli.py

import sys
import os
import logging
import datetime
import pandas as pd
import numpy as np

# Import config_parser module, which now handles ALL argument parsing and config loading
from mesalab.io import config_parser

# --- Logging Setup (Initial) ---
# This basic configuration ensures logs appear from the start.
# The level will be adjusted later by config_parser based on the 'debug' setting.
logging.basicConfig(
    level=logging.INFO, # Default level, will be overridden by config_parser
    format='%(asctime)s - %(levelname)s: %(message)s',
    handlers=[
        logging.StreamHandler(sys.stdout) # Log to console
    ]
)
# Suppress matplotlib font warnings, if any
logging.getLogger('matplotlib').setLevel(logging.WARNING)
logger = logging.getLogger(__name__) # Logger for cli.py itself

# --- Module Imports with Fallback (Consistent with previous versions) ---
try:
    from mesalab.mesatools import mesa_analyzer
    from mesalab.plotting import plot_hr_diagrams, plot_heatmaps, plot_blue_loop_summary
    from mesalab.gyretools import gyre_modules
except ImportError as e:
    logger.error(f"Failed to import core MESA/GYRE modules. Some functionalities might be unavailable: {e}")
    logger.warning("If you encounter 'module not found' errors later, ensure your PYTHONPATH is configured correctly or dependencies are installed.")
    
    # Define dummy placeholders if imports fail, to allow the script to run partially
    class DummyModule:
        def __getattr__(self, name):
            def dummy_func(*args, **kwargs):
                logger.warning(f"Function '{name}' from a missing module was called. Skipping operation.")
                return pd.DataFrame() if 'df' in name or 'data' in name else None # Return empty DF or None as a generic fallback
            return dummy_func
            
    # Assign dummy objects if actual imports failed
    if 'mesa_analyzer' not in sys.modules:
        mesa_analyzer = DummyModule()
    if 'plot_hr_diagrams' not in sys.modules:
        plot_hr_diagrams = DummyModule()
    if 'plot_heatmaps' not in sys.modules:
        plot_heatmaps = DummyModule()
    if 'plot_blue_loop_summary' not in sys.modules:
        plot_blue_loop_summary = DummyModule()
    if 'gyre_modules' not in sys.modules:
        gyre_modules = DummyModule()

# --- Main Application Logic ---
def main():
    # The only interaction cli.py has with command-line arguments is to pass
    # them directly to config_parser.parsing_options().
    # sys.argv[1:] contains all arguments *after* the script name (e.g., 'cli.py').
    
    logger.debug(f"Passing raw CLI arguments to config_parser: {sys.argv[1:]}")
    
    # Call config_parser.parsing_options with the raw CLI arguments.
    # This function will handle all parsing, merging with YAML, and setting defaults.
    config = config_parser.parsing_options()

    # At this point, 'config' is an argparse.Namespace object from config_parser.
    # Its attributes reflect the final resolved configuration.
    
    # --- Logging Setup (Final) ---
    # config_parser already sets up the logging level for the root logger.
    # We re-set it here to ensure cli.py's own logger and any other child loggers
    # also inherit the correct level based on the parsed config.
    if config.debug:
        logging.getLogger().setLevel(logging.DEBUG)
        logger.debug("Debug logging confirmed and enabled by config_parser.")
    else:
        logging.getLogger().setLevel(logging.INFO) # Ensure it's at least INFO if not debug

    logger.info(f"Final resolved configuration in cli.py: {config}")

    # --- Output Directory Setup ---
    timestamp = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
    output_base_dir = os.path.abspath(config.output_dir)
    session_output_dir = os.path.join(output_base_dir, f"mesa_analysis_{timestamp}")
    analysis_results_sub_dir = os.path.join(session_output_dir, 'analysis_results')
    detail_files_output_dir = os.path.join(session_output_dir, 'detail_files')
    plots_output_dir = os.path.join(session_output_dir, 'plots')
    gyre_output_dir = os.path.join(session_output_dir, 'gyre_output') # New GYRE specific output dir

    os.makedirs(analysis_results_sub_dir, exist_ok=True)
    os.makedirs(detail_files_output_dir, exist_ok=True)
    os.makedirs(plots_output_dir, exist_ok=True)
    os.makedirs(gyre_output_dir, exist_ok=True) # Create GYRE output directory
    logger.info(f"All outputs for this session will be saved in: '{session_output_dir}'")

    # --- MESA Analysis Workflow ---
    logger.info("\n--- Starting MESA Analysis Workflow ---")
    try:
        summary_df, combined_detail_data, full_history_data, gyre_input_csv_path = \
            mesa_analyzer.perform_mesa_analysis(
                config, # Pass the config Namespace directly
                analysis_results_sub_dir,
                detail_files_output_dir,
                config.filtered_profiles_csv_name # Name for the CSV generated by analyzer for GYRE
            )
        if summary_df.empty:
            logger.info("No summary data generated from MESA analysis. Skipping subsequent steps.")
            sys.exit(0)
        logger.info("MESA Analysis workflow completed.")
    except Exception as e:
        logger.critical(f"Error during MESA Analysis workflow: {e}", exc_info=True)
        sys.exit(1)


    # --- Plotting Workflow ---
    if config.generate_plots:
        logger.info("\n--- Starting Plotting Workflow ---")
        try:
            if config.generate_heatmaps:
                plot_heatmaps.generate_mass_z_heatmaps(summary_df, plots_output_dir)
            
            if config.generate_hr_diagrams != 'none':
                plot_hr_diagrams.generate_all_hr_diagrams(
                    full_history_data,
                    plots_output_dir,
                    hr_diagram_type=config.generate_hr_diagrams
                )
            
            if config.analyze_blue_loop:
                plot_blue_loop_summary.plot_blue_loop_data(
                    summary_df,
                    plots_output_dir,
                    blue_loop_output_type=config.blue_loop_output_type,
                    generate_plots_with_bc=config.generate_blue_loop_plots_with_bc
                )
            logger.info("Plotting workflow completed.")
        except Exception as e:
            logger.error(f"Error during plotting workflow: {e}", exc_info=True)
    else:
        logger.info("Plotting workflow is disabled in configuration.")


    # --- GYRE Workflow ---
    # This checks if gyre_modules is the actual module or a DummyModule (due to ImportError)
    if config.run_gyre_workflow and not isinstance(gyre_modules, type(sys.modules.get('mesalab.gyretools.gyre_modules', object()))):
        # Determine the full path to the GYRE config file
        gyre_config_full_path = os.path.abspath(config.gyre_config_path) # Use the path from resolved config
        
        # Check if the GYRE config file exists
        if not os.path.exists(gyre_config_full_path):
            logger.error(f"GYRE configuration file not found at '{gyre_config_full_path}'. Skipping GYRE workflow.")
        # Check if the filtered profiles CSV exists *if* blue loop analysis (which generates it) was enabled
        elif config.analyze_blue_loop and (not gyre_input_csv_path or not os.path.exists(gyre_input_csv_path)):
            logger.warning(f"GYRE workflow enabled, but the filtered profiles CSV ('{config.filtered_profiles_csv_name}') was not generated or not found at '{gyre_input_csv_path}'. "
                           "This is required for GYRE to run on filtered profiles. Skipping GYRE workflow.")
        else:
            logger.info("\n--- Starting GYRE Workflow ---")
            logger.info(f"Using GYRE specific settings from: '{gyre_config_full_path}'")
            try:
                gyre_modules.run_gyre_workflow(
                    gyre_config_path=gyre_config_full_path,
                    filtered_profiles_csv_path=gyre_input_csv_path, # Path to the CSV generated by mesa_analyzer
                    global_mesa_base_dir=os.path.abspath(config.input_dir), # Top-level MESA grid directory
                    global_output_base_dir=gyre_output_dir, # GYRE's specific output directory
                    debug_mode=config.debug
                )
                logger.info("GYRE workflow completed.")
            except Exception as e:
                logger.critical(f"Error during GYRE workflow: {e}", exc_info=True)
    elif config.run_gyre_workflow: # This block hits if run_gyre_workflow is True but gyre_modules is a DummyModule
        logger.warning("GYRE modules not fully available (ImportError detected earlier). Skipping GYRE workflow.")
    else:
        logger.info("GYRE workflow is disabled in configuration.")

    logger.info("\n--- MESA Grid Analysis and Workflow Finished ---")

# --- Entry Point ---
if __name__ == '__main__':
    main()
